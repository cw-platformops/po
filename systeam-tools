HOMEDIR=/home/$HOSTNAME
cd $HOMEDIR
readarray -t applist < <(ls -l $HOMEDIR/| awk '/^d/ {print $NF}')

mkdir /var/cw/systeam/.vim-backup > /dev/null 2>&1
cat <<- _EOF_ > /root/.vimrc
set backup
set backupdir=/var/cw/systeam/.vim-backup
set writebackup
set backupcopy=yes
au BufWritePre * let &bex = '@' . strftime("%F-%H-%M")
_EOF_

magerun () {
  FILE="/usr/bin/n98-magerun2"
  if [[ -s $FILE ]]; then
      /usr/bin/n98-magerun2 "$@" --skip-root-check
  else
      echo "Program is not installed.. Installing now..."
      curl -sS -O https://files.magerun.net/n98-magerun2-latest.phar && chmod +x n98-magerun2-latest.phar
	if [[ $(echo $?) == '0' ]]; then
      		mv n98-magerun2-latest.phar /usr/bin/n98-magerun2
      		/usr/bin/n98-magerun2 "$@" --skip-root-check
	else
		echo "Automatic install failed. Please install manually."
	fi
  fi
  }


st() {
  if [[ -z "$ORIG" ]]; then
    ORIG=$PS1
  fi
  TITLE="\[\e]2;$*\a\]"
  PS1=${ORIG}${TITLE}
}

rpl() {
    array=($@)
    len=${#array[@]}
    _original=$1
    _replacement=${array[@]:1:$len}
    fc -s "$_original=$_replacement"
}
app () {
	grep -lr "$(echo -e "$1" | sed -e 's|^[^/]*//| |' -e 's|/.*$||')" $HOMEDIR/*/conf | \
	awk 'END{split($0,a,"/"); print a[4]}'
	}

wp () {
	/usr/local/bin/wp "$@" --allow-root
	}

host () {
	/usr/bin/host $(echo $1 | sed -e 's|^[^/]*//||' -e 's|/.*$||')
	}

master () {
	su $(grep master /etc/passwd | head -n 1 | cut -d ":" -f1)
	}

fixperm() {
	/usr/bin/curl -s https://raw.githubusercontent.com/aphraz/cloudways/master/permissions.sh?Sdsdads | /bin/bash
	}

slowlog() {
	if [ $# -eq 0 ]; then
	     echo -n $'\U274E '
	     echo '[WARN] You did not provide any app.'
	     echo "Available apps are: ${applist[*]}"
	else
	    for args in "$@"
        	do
          	  cl_args=${args%/}
          	  if app_exist "${applist[*]}" "$cl_args"; then
                    echo ""
            	    echo -e "App: $cl_args"
	    	    gawk 'NR==1 {print substr($NF, 1, length($NF)-1)}' $HOMEDIR/$cl_args/conf/server.nginx
            	    for PID in $(gawk '{print}' $HOMEDIR/$cl_args/logs/php-app.access.log | sort -nbrk 12,12 |  \
		    head| gawk '{print $11}')
			do 
			  gawk "/pid $PID/,/^$/" $HOMEDIR/$cl_args/logs/php-app.slow.log
			done
		  else
		    echo ""
		    echo -n $'\U274E '
		    echo "There seems to be no app by the name, $cl_args.."
		    echo "Available apps are: ${applist[*]}"
		  fi
		done
	fi
	}

pidmem () {
	if [ $# -eq 0 ]; then
	  for A in $(ls -l $HOMEDIR/| gawk '/^d/ {print $NF}'); 
	    do
		echo ""
		echo -e "App: $A" 
		gawk 'NR==1 {print substr($NF, 1, length($NF)-1)}' $HOMEDIR/$A/conf/server.nginx
		gawk -v OFS="\t"  \
		'BEGIN{printf("\n%s\t%s\n", "PID","Memory")} {SUM[$11] += $13} END {for (s in SUM) \
		printf("%d\t%.2f %s\n", s,SUM[s]/1024/1024,"MB") | "sort -nbrk2,2 | head"}' \
		$HOMEDIR/$A/logs/php-app.access.log
	    done
	else
	    for args in "$@"
                do
                    cl_args=${args%/}
                    if app_exist "${applist[*]}" "$cl_args"; then
                     	echo "" 
                     	echo -e "App: $cl_args"
                     	gawk 'NR==1 {print substr($NF, 1, length($NF)-1)}' $HOMEDIR/$cl_args/conf/server.nginx
                     	gawk -v OFS="\t"  \
			'BEGIN{printf("\n%s\t%s\n", "PID","Memory")} {SUM[$11] += $13} END {for (s in SUM) \
			printf("%d\t%.2f %s\n", s,SUM[s]/1024/1024,"MB") | "sort -nbrk2,2 | head"}' \
			$HOMEDIR/$cl_args/logs/php-app.access.log
	 	    else				
	 		echo ""
			echo -n $'\U274E '
			echo "There seems to be no app by the name, $cl_args.."
			echo "Available apps are: ${applist[*]}"
	            fi
		done
	fi
	}

concurr () {
	watch -xtn 1 awk '$2 ~ /:01BB|:0050/ {count +=1;} END {print "Concurrent Web Traffic: ",count}' /proc/net/tcp
#while : ; do
#	read -t 1 -n 1 k <&1
#	if [[ $k = q ]] ; then
#		break
#	else
#		clear -x
#		#watch -xtn 1 awk '$2 ~ /:01BB|:0050/ {count +=1;} END {print "Concurrent Web Traffic: ",count}' /proc/net/tcp
#		awk '$2 ~ /:01BB|:0050/ {count +=1;} END {print "Concurrent Web Traffic: ",count}' /proc/net/tcp
#	fi
#done
	}

app_exist () {
APPS=$1
VALUE=$2
echo $APPS| tr ' ' '\n' | grep -x -q -F "$VALUE"
}

list-restore () {

if [ $# -eq 0 ]; then
                for i in $(ls -l /home/master/applications/| awk '/^d/ {print $NF}')
                do
                        echo -e "\nApp: $i"
                        /var/cw/scripts/bash/duplicity_restore.sh --src $i -c
                done
else
		for args in "$@"
                do
                        cl_args=${args%/}
                        if app_exist "${applist[*]}" "$cl_args"; then
				echo -e "\nApp: $cl_args"
                          	/var/cw/scripts/bash/duplicity_restore.sh --src $cl_args -c
			else
				echo ""
				echo -n $'\U274E '
				echo "There seems to be no app by the name, $cl_args.."
				echo "Available apps are: ${applist[*]}"
			fi

                done
fi
        }


reset-services () {
	/etc/init.d/nginx restart
	/etc/init.d/varnish restart
	/etc/init.d/apache2 restart
	/etc/init.d/$(php -v | awk '{print "php"substr($2,1,3)"-fpm";exit}') restart
	#/etc/init.d/php$(php -v  | head -n 1 | cut -d " " -f2 | cut -d "." -f1,2)-fpm restart
	/etc/init.d/mysql restart
	/etc/init.d/memcached restart
	/etc/init.d/redis-server restart 2> /dev/null
	} 

sqlvars () {
	mysqladmin variables | tr -d " " | awk -F'|' '{print $2 " = " $3}'
	}
apptype () {
	awk '/server_name/ {split($2,a,"-") ; print a[1]; exit}' $HOMEDIR/$1/conf/server.nginx
	}

cleanup () {
	rm -f /root/.vimrc
	find /var/cw/systeam/.vim-backup/ -type f -mtime +30 -delete
	}
trap cleanup EXIT
